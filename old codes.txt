app.post('/upload-loan', upload.single('loanExcelFile'), async (req, res) => {
    try {
        const { selectedDeductionCode, preparedByCode, approvedByCode } = req.body;
        const deductionDesc = await getDeductionDesc(req.query.deductionType);

        if (!deductionDesc) {
            return res.status(400).json({ message: "Please select a deduction description." });
        }

        const workbook = new excelJS.Workbook();
        await workbook.xlsx.load(req.file.buffer);
        const worksheet = workbook.worksheets[0];

        const sheetData = worksheet.getSheetValues();
        const actualData = sheetData.slice(2).map(row => row.slice(1));

        res.json({
            deductionTypes,
            deductionDesc,
            actdata: actualData
        });

        const savedData = [];

        const mappedData = actualData.map(async (row) => ({
            lnm_employeeno: row[0],
            lnm_employeename: row[1],
            lnm_amount: row[2],
            isQualified: await isEmployeeQualified(row[0]),
            hasExistingLoan: await isLoanExisting(row[0], selectedDeductionCode)
        }));

        for (const loanData of await Promise.all(mappedData)) {
            const { lnm_employeeno, lnm_employeename, lnm_amount, isQualified, hasExistingLoan } = loanData;

            if (isQualified && !hasExistingLoan) {
                try {
                    const division = await getEmployeeDivision(lnm_employeeno)
                    const transactionNumber = await getNextTransactionNumber();
                    const formattedTransactionNumber = `LN-JAD-${transactionNumber.toString().padStart(6, '0')}`;

                    const today = new Date();
                    const loandate = today.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: '2-digit' });

                    await createLoan(
                        formattedTransactionNumber,
                        loandate,
                        lnm_employeeno,
                        selectedDeductionCode,
                        lnm_amount,
                        lnm_amount,
                        preparedByCode,
                        approvedByCode,
                        'True',
                        lnm_amount,
                        lnm_amount,
                        division,
                        'Saved Using Uploader'
                    );

                    await updateLnNum(transactionNumber);
                    console.log("Saved!")
                    savedData.push(loanData);
                } catch (error) {
                    console.log(error);
                    next(error);
                }
            } else {
                const invalidData = {
                    employeeNumber: lnm_employeeno,
                    employeeName: lnm_employeename,
                    loanAmount: lnm_amount
                };
                console.log(
                    isQualified
                        ? "Employee not exists:\n" + invalidData
                        : "Employee has existing loan:\n" + invalidData
                );
            }
        };
        // Send only successfully saved data to the client
        res.json({ actdata: savedData });

    } catch (error) {
        console.log(error);
        next(error);
    }
});